<!DOCTYPE html>
<html lang="en">
  <head>
    <title>behave simplest example</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <!-- Le HTML5 shim, for IE6-8 support of HTML elements -->
    <!--[if lt IE 9]>
      <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->

    <link href='http://fonts.googleapis.com/css?family=Bree+Serif' rel='stylesheet' type='text/css'> 
    <link href='http://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css'>

    <link href="lib/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="lib/bootstrap/css/bootstrap-responsive.css" rel="stylesheet">

    <link rel="stylesheet" href="lib/codemirror/lib/codemirror.css">
    <!--
    <link rel="stylesheet" href="lib/codemirror/theme/ambiance.css">
    <link rel="stylesheet" href="lib/codemirror/theme/elegant.css">
    -->
    <script src="lib/codemirror/lib/codemirror.js"></script>
    <script src="lib/codemirror/mode/coffeescript/coffeescript.js"></script>

    <link href="lib/style.css" rel="stylesheet">
  </head>

  <body>
    <div class="container">

      <section id="example">
        <div class="page-header">
          <h1><b>behave</b> Sandbox</h1>
        </div>

        <div class="row">
          <div class="span12">
            <h3>Examples</h3>
            <form class="well form-inline">
              <label for="exampleChooser">Select an example</label>
              <select id="exampleChooser">
                <option selected="selected" disabled="disabled">Pick one</option>
                <option value="code/hello-world.coffee">Hello World</option>
                <option value="code/hello-world-sequence.coffee">Hello Sequence</option>
                <option value="code/simple-sequence.coffee">Simple sequence</option>
              </select>
            </form>
          </div>
        </div>

        <div class="row">
          <div class="span12">
            <h3>Test grid</h3>
            <div class="well">
              <canvas id="canvas" width="1100px" height="300px"></canvas>
            </div>
          </div>
        </div>

        <div class="row">
          <div class="span8">
            <h3>Behavior Tree code</h3>
            <textarea id="code" class="code"></textarea>
            <br/>
            <div class="alert alert-error hide" id="compileError">
              <strong>Compilation error!</strong>
              <p id="errorText">Too bad.</p>
            </div>
            <a id="runBtn" class="btn"><i class="icon-play-circle"></i> Run</a>
          </div>
          <div class="span4">
            <h3>Output</h3>
            <pre id="output" class="pre-scrollable biggerText CodeMirror-scroll"></pre>
          </div>
        </div>
      </section>

      <!--
      <footer class="footer">
        <p class="pull-right"><a href="#">Back to top</a></p>
      </footer>
      -->

    </div><!-- /container -->

    <script src="lib/jquery/jquery.min.js" type="text/javascript"></script>
    <script src="../lib/behave.js" type="text/javascript"></script>
    
    <script type="text/coffeescript">
      chooserEl = $('#exampleChooser')
      outputEl  = $('#output')
      notificationEl = $("#compileError")

      window.print = (text) -> 
        outputEl.html(outputEl.html() + text + '\n')

      loadContent = (file) -> 
        $.get file, (data) ->
          editor.setValue data

      chooserEl.on 'change', -> loadContent $(this).val()

      editor = CodeMirror.fromTextArea $('#code')[0], 
        theme: 'default'
        lineNumbers: false
        tabSize: 2,
        indentUnit: 2,
        indentWithTabs: false

      editor.setValue $('#btCode').html()

      showError = (msg) ->
        notificationEl.find('#errorText').html msg
        notificationEl.slideDown 'fast'

      compileSource = ->
        source = editor.getValue()
        window.compiledJS = ''
        try
          window.compiledJS = CoffeeScript.compile source, bare: on
        catch error
          showError error.message

      evalJS = ->
        try
          eval window.compiledJS
        catch error
          showError error.message

      $('#runBtn').on 'click', -> 
        outputEl.html ''
        notificationEl.slideUp 'fast'
        compileSource()
        evalJS()
    </script>

    <script type="text/coffeescript" id="btCode">
Sequence = require("core/sequence")
TaskStatus = require("core/taskstatus")

class OutputTask
  constructor: (@text, @status = TaskStatus.SUCCESS) ->
  execute: ->
    print @text + ' [' + @status + ']'
    @status

root = new Sequence()
root.add new OutputTask 'Task 1'
root.add new OutputTask 'Task 2'
root.add new OutputTask 'Task 3', TaskStatus.FAILURE
root.add new OutputTask 'Task 4'
root.execute()
    </script>

    <script src="lib/CoffeeScript.js"></script>
    
    <script src="lib/Tween.js"></script>
    <script src="lib/RequestAnimationFrame.js"></script>

    <script>
      var canvas;
      var gridSize = 75;
      var boxSize = 50;
      var startPosition = gridSize * 2 - gridSize / 2;
      var position = {x: startPosition, y: startPosition, rotation: 0, colorIndex: 0};

      if (!canvas.getContext)
        return;

      var context = canvas.getContext("2d");

      function update() {
        context.clearRect(0, 0, context.canvas.width, context.canvas.height);
        
        drawGrid(context);
        drawPlayer(context);
      }

      function drawGrid(context) {
        context.fillStyle = "rgb(150, 150, 150)";
        for (var x = gridSize; x < context.canvas.width; x += gridSize) {
          context.fillText(Math.round(x / gridSize), x + gridSize / 2, 10);
          context.beginPath();
          context.moveTo(x, 0);
          context.lineTo(x, context.canvas.height);
          context.stroke();
        }
        for (var y = gridSize; y < context.canvas.height; y += gridSize) {
          context.fillText(Math.round(y / gridSize), 10, y + gridSize / 2);
          context.beginPath();
          context.moveTo(0, y);
          context.lineTo(context.canvas.width, y);
          context.stroke();
        }
      }

      function drawPlayer(context) {
        context.save(); 
        context.translate(position.x, position.y);
        var rotDegrees = Math.floor(position.rotation);
        var rotRadians = rotDegrees * (Math.PI / 180);
        context.rotate(rotRadians);  

        context.shadowColor = "#999";
        context.shadowBlur = 10;
        context.shadowOffsetX = 5;
        context.shadowOffsetY = 5;

        context.fillStyle = "rgb(" + Math.floor(position.colorIndex) + ", 0, " + (255 - Math.floor(position.colorIndex)) + ")";
        context.fillRect(-boxSize/2, -boxSize/2, boxSize, boxSize);

        context.textAlign = "center";
        context.textBaseline = 'top';
        context.fillText("Hello World!", 0, boxSize/2);

        context.restore();
      }

      var run = function() {
        requestAnimationFrame(run);
        update();
      };

      run();
    </script>
  </body>
</html>